{"version":3,"file":"static/preview.a326886bd76fc088efcf.bundle.js","sources":["webpack:///./src/InvariantScatterplotLayer/InvariantScatterplotLayer.js"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer} from 'deck.gl'\nimport {GL, Model, Geometry, fp64} from 'luma.gl'\nconst {fp64LowPart} = fp64\n\nimport vs from './vertex.glsl'\nimport fs from './fragment.glsl'\n\nconst DEFAULT_COLOR = [0, 0, 0, 255]\n\nconst defaultProps = {\n  radiusScale: 1,\n  radiusMinPixels: 0, //  min point radius in pixels\n  radiusMaxPixels: Number.MAX_SAFE_INTEGER, // max point radius in pixels\n  strokeWidth: 1,\n  outline: false,\n  fp64: false,\n\n  getPosition: x => x.position,\n  getRadius: x => x.radius || 1,\n  getColor: x => x.color || DEFAULT_COLOR\n}\n\nexport default class ScatterplotLayer extends Layer {\n  getShaders(id) {\n    const projectModule = this.is64bitEnabled() ? 'project64' : 'project32'\n    return {vs, fs, modules: [projectModule, 'picking']}\n  }\n\n  initializeState() {\n    this.state.attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instancePositions64xyLow: {\n        size: 2,\n        accessor: 'getPosition',\n        update: this.calculateInstancePositions64xyLow\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: 4,\n        transition: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getColor',\n        defaultValue: [0, 0, 0, 255]\n      }\n    })\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags})\n    if (props.fp64 !== oldProps.fp64) {\n      const {gl} = this.context\n      if (this.state.model) {\n        this.state.model.delete()\n      }\n      this.setState({model: this._getModel(gl)})\n      this.state.attributeManager.invalidateAll()\n    }\n  }\n\n  draw({uniforms}) {\n    const {radiusScale, radiusMinPixels, radiusMaxPixels, outline, strokeWidth} = this.props\n    this.state.model.render(\n      Object.assign({}, uniforms, {\n        outline: outline ? 1 : 0,\n        strokeWidth,\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels\n      })\n    )\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, -1, 1, 0, 1, 1, 0, 1, -1, 0]\n\n    return new Model(\n      gl,\n      Object.assign(this.getShaders(), {\n        id: this.props.id,\n        geometry: new Geometry({\n          drawMode: GL.TRIANGLE_FAN,\n          attributes: {\n            positions: new Float32Array(positions)\n          }\n        }),\n        isInstanced: true,\n        shaderCache: this.context.shaderCache\n      })\n    )\n  }\n\n  calculateInstancePositions64xyLow(attribute) {\n    const isFP64 = this.is64bitEnabled()\n    attribute.isGeneric = !isFP64\n\n    if (!isFP64) {\n      attribute.value = new Float32Array(2)\n      return\n    }\n\n    const {data, getPosition} = this.props\n    const {value} = attribute\n    let i = 0\n    for (const point of data) {\n      const position = getPosition(point)\n      value[i++] = fp64LowPart(position[0])\n      value[i++] = fp64LowPart(position[1])\n    }\n  }\n}\n\nScatterplotLayer.layerName = 'ScatterplotLayer'\nScatterplotLayer.defaultProps = defaultProps\n"],"mappings":"AAsBA","sourceRoot":""}